import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import('globalEnv')

envLibrary = globalEnv.Clone()

cpppath = []
if 'libfox_includes' in envLibrary and envLibrary['libfox_includes']:
	cpppath = [envLibrary['libfox_includes']]
	envLibrary.Append(CPPPATH = cpppath)

linkpath = []
if 'libfox_libraries' in envLibrary and envLibrary['libfox_libraries']:
	linkpath = [envLibrary['libfox_libraries']]
	envLibrary.Append(LIBPATH = linkpath)

foxSrcVersion = '1.7.67'
srcdir = 'fox-{}'.format(foxSrcVersion)

libFOXVersion = '1.7'
libLinkVersion = '0'
libLinkName = 'FOX-{}'.format(libFOXVersion)

# download
libFileName = envLibrary.subst('lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.format(libLinkName, libLinkVersion))
staticFileName = envLibrary.subst('lib/${{LIBPREFIX}}{}${{LIBSUFFIX}}'.format(libLinkName))

nodeArtifacts = envLibrary.DownloadArtifactHelper('{}.tar.bz2'.format(srcdir), 'fox', 'lib_fox_fetch')
globalEnv.targetManager.add('lib_fox_fetch',
	globalEnv.targetManager.Target('Fetch FOX-Toolkit', nodeArtifacts))

# check for system lib
hasSystemLib = False
conf = envLibrary.Configure()
if envLibrary['with_system_fox'] != TernaryVariableNo:
	hasSystemLib = conf.CheckLibWithHeader(libLinkName,
		'fox-{}/fx.h'.format(libFOXVersion), 'c++', 'fxgetticks();')
conf.Finish()

if not hasSystemLib and envLibrary['with_system_fox'] == TernaryVariableYes:
	Exit('Requested to use system FOX-Toolkit but no usable FOX-Toolkit found.')

if hasSystemLib:
	targetLibrary = globalEnv.targetManager.TargetLibrary('FOX-Toolkit')
	globalEnv.targetManager.add('fox', targetLibrary)
	targetLibrary.addParametersBuildCPP(envLibrary, [libLinkName], cpppath, linkpath)

	Return()

def foxBuild(target, source, env):
	buildDir = target[0].get_dir().up()
	buildDir = target[0].get_dir().up()
	
	untarArchive(buildDir.abspath, source[0].abspath)
	
	script = createScriptHeader(env)
	
	script.append('cd "{}" || exit 1'.format(buildDir.Dir(srcdir).abspath))
	
	for p in env['PATCHES']:
		script.append('patch -p1 <{} || exit 1'.format(p.srcnode().abspath))
	
	script.append('autoreconf -fi || exit 1')
	
	for p in env['POST_PATCHES']:
		script.append('patch -p1 <{} || exit 1'.format(p.srcnode().abspath))
	
	cmdline = ['./configure --prefix="{}"'.format(buildDir.abspath)]
	
	cmdline.append('--enable-release')
	
	cmdline.append('--disable-png')
	cmdline.append('--disable-jpeg')
	cmdline.append('--disable-jp2')
	cmdline.append('--disable-webp')
	cmdline.append('--disable-tiff')
	cmdline.append('--disable-bz2lib')
	cmdline.append('--with-opengl')
	cmdline.append('--enable-threadsafe')
	cmdline.append('--enable-silent-rules')
	
	cmdline.append('--enable-shared=yes')
	cmdline.append('--enable-static=no')
	
	if 'CROSSCOMPILE_HOST' in env:
		cmdline.append('--host={}'.format(env['CROSSCOMPILE_HOST']))
	
	script.append('{} || exit 1'.format(' '.join(cmdline)))
	
	script.append('cd lib || exit 1')
	script.append('make -j {} install || exit 1'.format(env['with_threads']))
	
	script.append('cd ../include')
	script.append('make -j {} install || exit 1'.format(env['with_threads']))
	
	if not env.RunExternalCommand(script):
		raise Exception('Failed building fox')

patches = [] # create with 'diff -rupN original_sources patches_sources'
globFiles(envLibrary, 'patches/{}'.format(foxSrcVersion), '*.patch', patches, recursive=False)
envLibrary.Append(PATCHES = [envLibrary.File(x) for x in sorted(patches)])

postPatches = [] # create with 'diff -rupN original_sources patches_sources'
globFiles(envLibrary, 'postPatches/{}'.format(foxSrcVersion), '*.patch', postPatches, recursive=False)
envLibrary.Append(POST_PATCHES = [envLibrary.File(x) for x in sorted(postPatches)])

targets = [libFileName]
with open(envLibrary.File('header_file_list/{}'.format(foxSrcVersion)).srcnode().abspath, 'r') as f:
	targets.extend([x[:-1] for x in f.readlines()])

library = envLibrary.Command(targets, nodeArtifacts, envLibrary.Action(foxBuild, 'Build fox'))
envLibrary.Depends(library, envLibrary['PATCHES'])
envLibrary.Depends(library, envLibrary['POST_PATCHES'])

depends = globalEnv.Alias('lib_fox', library)

envLibrary.Clean(library, ['bin', 'include', 'lib', srcdir])

targetLibrary = globalEnv.targetManager.TargetLibrary('FOX-Toolkit')
globalEnv.targetManager.add('fox', targetLibrary)
targetLibrary.build.append(library[0])
targetLibrary.addParametersBuildCPP(envLibrary, [library[0]], 'include', 'lib')
targetLibrary.addParameters(LINKFLAGS = ['-Wl,-R,"$$ORIGIN"'])
targetLibrary.runtimeLibs.append(library[0])
