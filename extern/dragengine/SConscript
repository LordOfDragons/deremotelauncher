import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import('globalEnv')

envLibrary = globalEnv.Clone()

cpppathDragengine = []
if 'dragengine_includes' in envLibrary and envLibrary['dragengine_includes']:
	cpppathDragengine = [envLibrary['dragengine_includes']]
	envLibrary.Append(CPPPATH = cpppathDragengine)

linkpathDragengine = []
if 'dragengine_libraries' in envLibrary and envLibrary['dragengine_libraries']:
	linkpathDragengine = [envLibrary['dragengine_libraries']]
	envLibrary.Append(LIBPATH = linkpathDragengine)

cpppathDELauncher = []
if 'delauncher_includes' in envLibrary and envLibrary['delauncher_includes']:
	cpppathDELauncher = [envLibrary['delauncher_includes']]
	envLibrary.Append(CPPPATH = cpppathDELauncher)

linkpathDELauncher = []
if 'delauncher_libraries' in envLibrary and envLibrary['delauncher_libraries']:
	linkpathDELauncher = [envLibrary['delauncher_libraries']]
	envLibrary.Append(LIBPATH = linkpathDELauncher)

dragengineVersion = '1.24'

srcdir = 'dragengine-{}-linux64'.format(dragengineVersion)
srcdirDev = 'dragengine-dev-{}-linux64'.format(dragengineVersion)

libLinkVersion = 9999 if dragengineVersion == 'nightly' else dragengineVersion.split('.')[0]
libLinkNameDragengine = 'dragengine'
libLinkNameDELauncher = 'delauncher'

# download
libFileNameDragengine = envLibrary.subst(
	'/usr/lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.format(
		libLinkNameDragengine, libLinkVersion))

libFileNameDELauncher = envLibrary.subst(
	'/usr/lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.format(
		libLinkNameDELauncher, libLinkVersion))
print(libFileNameDragengine, libFileNameDELauncher)

baseUrl = 'https://github.com/LordOfDragons/dragengine/releases/download'
urlVersion = 'nightly' if dragengineVersion == 'nightly' else 'v{}'.format(dragengineVersion)

nodeArtifacts = envLibrary.DownloadArtifactHelper('{}.tar.bz2'.format(srcdir),
	urlVersion, 'lib_dragengine_fetch', baseUrl=baseUrl)
nodeArtifactsDev = envLibrary.DownloadArtifactHelper('{}.tar.bz2'.format(srcdirDev),
	urlVersion, 'lib_dragengine_fetch', baseUrl=baseUrl)
globalEnv.targetManager.add('lib_dragengine_fetch',
	globalEnv.targetManager.Target('Fetch DELauncher Library',
		nodeArtifacts + nodeArtifactsDev))

# check for system lib
hasSystemLibs = False
conf = envLibrary.Configure()
hasSystemLibs = (conf.CheckLibWithHeader(libLinkNameDragengine, 'dragengine/deObject.h', 'c++')
	and conf.CheckLibWithHeader(libLinkNameDELauncher, 'delauncher/delLauncher.h', 'c++'))
conf.Finish()

if hasSystemLibs:
	targetLibrary = globalEnv.targetManager.TargetLibrary('Dragengine Library')
	globalEnv.targetManager.add('dragengine', targetLibrary)
	targetLibrary.addParametersBuildCPP(envLibrary, [libLinkNameDragengine],
		cpppathDragengine, linkpathDragengine)

	targetLibrary = globalEnv.targetManager.TargetLibrary('DELauncher Library')
	globalEnv.targetManager.add('delauncher', targetLibrary)
	targetLibrary.addParametersBuildCPP(envLibrary, [libLinkNameDELauncher],
		cpppathDELauncher, linkpathDELauncher)

	Return()

# unpack
def dragengineUnpack(target, source, env):
	untarArchive(target[0].get_dir().up().up().abspath, source[0].abspath)

targets = ['sdk/include/dummy']
with open(envLibrary.File('header_file_list/dragengine').srcnode().abspath, 'r') as f:
	targets.extend([x[:-1] for x in f.readlines()])
with open(envLibrary.File('header_file_list/delauncher').srcnode().abspath, 'r') as f:
	targets.extend([x[:-1] for x in f.readlines()])

headers = envLibrary.Command(targets, nodeArtifactsDev,
	envLibrary.Action(dragengineUnpack, 'Unpack Dragengine Headers'))

targets = [libFileNameDragengine, libFileNameDELauncher]
libraries = envLibrary.Command(targets, nodeArtifacts,
	envLibrary.Action(dragengineUnpack, 'Unpack Dragengine Libraries'))

envLibrary.Clean(libraries, ['sdk', 'usr', srcdir, srcdirDev])

targetLibrary = globalEnv.targetManager.TargetLibrary('Dragengine Library')
globalEnv.targetManager.add('dragengine', targetLibrary)
targetLibrary.build.append(libraries[0])
targetLibrary.addParametersBuildCPP(envLibrary, [libraries[0]], 'sdk/include', 'usr/lib')

targetLibrary = globalEnv.targetManager.TargetLibrary('DELauncher Library')
globalEnv.targetManager.add('delauncher', targetLibrary)
targetLibrary.build.append(libraries[1])
targetLibrary.addParametersBuildCPP(envLibrary, [libraries[1]], 'sdk/include', 'usr/lib')
