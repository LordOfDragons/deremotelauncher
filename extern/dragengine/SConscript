import os
import sys
import SCons

from SConsCommon import *
from SConsExternCommon import *

Import('globalEnv')

envLibrary = globalEnv.Clone()

if 'dragengine_includes' in envLibrary and envLibrary['dragengine_includes']:
	envLibrary.Append(CPPPATH = [envLibrary['dragengine_includes']])

if 'dragengine_libraries' in envLibrary and envLibrary['dragengine_libraries']:
	envLibrary.Append(LIBPATH = [envLibrary['dragengine_libraries']])

if 'delauncher_includes' in envLibrary and envLibrary['delauncher_includes']:
	envLibrary.Append(CPPPATH = [envLibrary['delauncher_includes']])

if 'delauncher_libraries' in envLibrary and envLibrary['delauncher_libraries']:
	envLibrary.Append(LIBPATH = [envLibrary['delauncher_libraries']])

dragengineVersion = '1.24'

srcdir = 'dragengine-{}-linux64'.format(dragengineVersion)
srcdirDev = 'dragengine-dev-{}-linux64'.format(dragengineVersion)

libLinkVersion = dragengineVersion.split('.')[0]
libLinkNameDragengine = 'dragengine'
libLinkNameDELauncher = 'delauncher'

hasSystemLibs = False
conf = envLibrary.Configure()
hasSystemLibs = (conf.CheckLibWithHeader(libLinkNameDragengine, 'dragengine/deObject.h', 'c++')
	and conf.CheckLibWithHeader(libLinkNameDELauncher, 'delauncher/delLauncher.h', 'c++'))
conf.Finish()

if hasSystemLibs:
	globalEnv.Append(LIBS=[libLinkNameDragengine, libLinkNameDELauncher])
	Return()

# download and unpack
libFileNameDragengine = envLibrary.subst(
	'usr/lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.format(
		libLinkNameDragengine, libLinkVersion))

libFileNameDELauncher = envLibrary.subst(
	'usr/lib/${{SHLIBPREFIX}}{}${{SHLIBSUFFIX}}.{}'.format(
		libLinkNameDELauncher, libLinkVersion))

baseUrl = 'https://github.com/LordOfDragons/dragengine/releases/download'

nodeArtifacts = envLibrary.DownloadArtifactHelper(
	'{}.tar.bz2'.format(srcdir), 'v{}'.format(dragengineVersion),
	'lib_dragengine_fetch', baseUrl=baseUrl)
nodeArtifactsDev = envLibrary.DownloadArtifactHelper(
	'{}.tar.bz2'.format(srcdirDev), 'v{}'.format(dragengineVersion),
	'lib_dragengine2_fetch', baseUrl=baseUrl)

def dragengineUnpack(target, source, env):
	untarArchive(target[0].get_dir().up().up().abspath, source[0].abspath)

targets = ['sdk/include/dummy']
with open(envLibrary.File('header_file_list/dragengine').srcnode().abspath, 'r') as f:
	targets.extend([x[:-1] for x in f.readlines()])
with open(envLibrary.File('header_file_list/delauncher').srcnode().abspath, 'r') as f:
	targets.extend([x[:-1] for x in f.readlines()])

headers = envLibrary.Command(targets, nodeArtifactsDev,
	envLibrary.Action(dragengineUnpack, 'Unpack Dragengine Headers'))

targets = [libFileNameDragengine, libFileNameDELauncher]
libraries = envLibrary.Command(targets, nodeArtifacts,
	envLibrary.Action(dragengineUnpack, 'Unpack Dragengine Libraries'))

envLibrary.Clean(libraries, ['sdk', 'usr', srcdir, srcdirDev])

globalEnv.Append(CPPPATH = [envLibrary.Dir('sdk/include')])
globalEnv.Append(LIBPATH = [envLibrary.Dir('usr/lib')])

globalEnv.Append(LIBS=libraries)
